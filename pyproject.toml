[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "whitelistmcp"
dynamic = ["version"]
description = "Multi-cloud MCP server for security group/firewall IP whitelisting across AWS, Azure, and GCP"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "DBBuilder", email = "dbbuilderio@gmail.com"},
]
keywords = [
    "aws", "azure", "gcp", "security-group", "firewall", "nsg", 
    "mcp", "model-context-protocol", "whitelist", "ip-management", 
    "multi-cloud", "cloud-security"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Security",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
]

dependencies = [
    # Common dependencies
    "python-json-logger>=2.0.7",
    "pydantic>=2.5.0",
    "requests>=2.28.0",
    # AWS dependencies
    "boto3>=1.34.0",
    "botocore>=1.34.0",
    # Azure dependencies
    "azure-identity>=1.15.0",
    "azure-mgmt-network>=25.0.0",
    "azure-core>=1.29.0",
    # GCP dependencies
    "google-cloud-compute>=1.14.0",
    "google-auth>=2.25.0",
]

[project.optional-dependencies]
remote = [
    "aiohttp>=3.8.0",
    "aiohttp-cors>=0.7.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=1.0.0",
    "pytest-mock>=3.0.0",
    "black>=23.0.0",
    "isort>=5.13.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]
qa = [
    # Type checking
    "mypy>=1.8.0",
    "types-requests>=2.31.0",
    # Code formatting and style
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=24.1.0",
    "flake8-comprehensions>=3.14.0",
    "pylint>=3.0.0",
    "ruff>=0.1.0",
    # Security
    "bandit[toml]>=1.7.0",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    # Code quality
    "radon>=6.0.0",
    "xenon>=0.9.0",
    "vulture>=2.10.0",
    "interrogate>=1.5.0",
    # Testing
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "coverage[toml]>=7.4.0",
    "hypothesis>=6.0.0",
    "tox>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/dbbuilder/whitelistmcp"
Documentation = "https://github.com/dbbuilder/whitelistmcp#readme"
Repository = "https://github.com/dbbuilder/whitelistmcp.git"
Issues = "https://github.com/dbbuilder/whitelistmcp/issues"

[project.scripts]
whitelistmcp = "whitelistmcp.main:main"
whitelistmcp-remote = "whitelistmcp.remote_server:main"

[tool.setuptools]
packages = ["whitelistmcp"]

[tool.setuptools.dynamic]
version = {attr = "whitelistmcp.__version__.__version__"}

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "azure.*",
    "google.*",
    "googleapiclient.*",
    "google.auth.*",
    "google.oauth2.*",
]
ignore_missing_imports = true

[tool.pylint]
max-line-length = 120
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring  
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Protected access
    "W0511",  # TODO/FIXME comments
]

[tool.ruff]
line-length = 120
target-version = "py38"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]  # assert statements are fine in tests

[tool.coverage.run]
branch = true
source = ["whitelistmcp"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-ra -v --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.bandit]
exclude_dirs = ["tests", "test", ".venv", "venv"]
skips = ["B101", "B601"]

[tool.vulture]
min_confidence = 80
paths = ["whitelistmcp"]
exclude = ["tests/", "test_*.py"]