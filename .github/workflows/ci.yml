name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Quick checks that should pass before running expensive tests
  pre-checks:
    name: Pre-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Check Python syntax
        run: |
          python -m py_compile whitelistmcp/**/*.py
      
      - name: Validate pyproject.toml
        run: |
          pip install tomli
          python -c "import tomli; tomli.load(open('pyproject.toml', 'rb'))"

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -e ".[qa]"
      
      - name: Run black
        run: black --check whitelistmcp tests
      
      - name: Run isort
        run: isort --check-only whitelistmcp tests
      
      - name: Run flake8
        run: flake8 whitelistmcp
      
      - name: Run pylint
        run: pylint whitelistmcp --exit-zero
      
      - name: Run mypy
        run: mypy whitelistmcp
      
      - name: Run ruff
        run: ruff check whitelistmcp

  # Security checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -e ".[qa]"
      
      - name: Run bandit
        run: bandit -r whitelistmcp -ll -f json -o bandit-report.json
      
      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json
      
      - name: Check dependencies with safety
        run: safety check --json
        continue-on-error: true
      
      - name: Run pip-audit
        run: pip-audit
        continue-on-error: true

  # Test suite
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: pre-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to save CI time
          - os: windows-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.9'
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install -e ".[dev]"
      
      - name: Run tests
        run: |
          pytest tests/ -v --cov=whitelistmcp --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        with:
          name: coverage-report
          path: htmlcov/

  # Build distribution packages
  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          pip install build twine
      
      - name: Build distribution
        run: python -m build
      
      - name: Check distribution
        run: twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -e .
          pip install sphinx sphinx-rtd-theme
      
      - name: Build docs
        run: |
          cd docs
          make html
      
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: docs/_build/html/

  # Final status check
  status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [quality, security, test, build, docs]
    if: always()
    steps:
      - name: Check status
        run: |
          if [[ "${{ needs.quality.result }}" == "failure" ]] || \
             [[ "${{ needs.security.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]]; then
            echo "CI failed!"
            exit 1
          else
            echo "CI passed!"
          fi